import sqlite3
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from fastapi import FastAPI, Request
import uvicorn
import os

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====
# –¢–æ–∫–µ–Ω –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–¥–µ (–∫–∞–∫ —Ç—ã –ø—Ä–æ—Å–∏–ª)
TOKEN = "7699699715:AAFAOCQJ4uDDFmFOaKS0XRpCukFKjb5cym8"

# –ë–∞–∑–æ–≤—ã–π URL —Ç–≤–æ–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (–ª—É—á—à–µ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_BASE_URL)
WEBHOOK_BASE_URL = os.getenv("WEBHOOK_BASE_URL", "https://telegram-bot-4ciw.onrender.com")
WEBHOOK_URL = f"{WEBHOOK_BASE_URL.rstrip('/')}/"

# ==== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ====
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

# ==== Aiogram ====
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ==== FastAPI ====
app = FastAPI()


# ---- health / root ----
@app.get("/")
async def root():
    return {"message": "Bot is running!", "webhook_url": WEBHOOK_URL}

@app.head("/")
async def head_root():
    # —á—Ç–æ–±—ã Render health-checks –Ω–µ —Å—ã–ø–∞–ª–∏ 405
    return {}


# ---- –≤—Ö–æ–¥—è—â–∏–µ –∞–ø–¥–µ–π—Ç—ã –∏–∑ Telegram (–≤–µ–±—Ö—É–∫) ----
@app.post("/")
async def process_update(update: dict, request: Request):
    # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —á—Ç–æ Telegram —Ä–µ–∞–ª—å–Ω–æ —à–ª–µ—Ç POST
    try:
        ip = request.client.host if request and request.client else "unknown"
        logger.info(f"POST / from {ip} | keys={list(update.keys())}")
    except Exception:
        pass

    telegram_update = types.Update.model_validate(update)
    await dp.feed_update(bot, telegram_update)
    return {"ok": True}


# ==== SQLite ====
conn = sqlite3.connect("questions.db", check_same_thread=False)
cursor = conn.cursor()

cursor.executescript("""
CREATE TABLE IF NOT EXISTS topics (
    id INTEGER PRIMARY KEY,
    name TEXT
);
CREATE TABLE IF NOT EXISTS questions (
    id INTEGER PRIMARY KEY,
    topic_id INTEGER,
    question TEXT,
    option_a TEXT,
    option_b TEXT,
    option_c TEXT,
    option_d TEXT,
    correct_answer TEXT,
    explanation TEXT,
    FOREIGN KEY (topic_id) REFERENCES topics(id)
);
""")
conn.commit()

def fetch_all(query, params=()):
    cursor.execute(query, params)
    return cursor.fetchall()


# ==== user_progress –≤ –ø–∞–º—è—Ç–∏ ====
user_progress = {}


# ==== –•—ç–Ω–¥–ª–µ—Ä—ã ====
@dp.message(Command("start", "restart"))
async def start_handler(message: types.Message):
    topics = fetch_all("SELECT id, name FROM topics")
    logger.info(f"/start from {message.from_user.id} | topics={len(topics)}")

    if not topics:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–º.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=name, callback_data=f"topic_{id}")]
            for id, name in topics
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)


@dp.callback_query(lambda c: c.data.startswith("topic_"))
async def topic_handler(callback: types.CallbackQuery):
    # –°–†–ê–ó–£ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–≤–∏—Ç—å "query is too old"
    await callback.answer()

    topic_id = int(callback.data.split("_")[1])
    questions = fetch_all(
        """
        SELECT id, question, option_a, option_b, option_c, option_d, correct_answer, explanation
        FROM questions
        WHERE topic_id = ?
        ORDER BY RANDOM()
        """,
        (topic_id,)
    )

    if not questions:
        await callback.message.answer("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ.")
        return

    user_progress[callback.from_user.id] = {
        "questions": questions,
        "current_index": 0,
        "correct_answers": 0,
        "wrong_answers": [],
        "topic_id": topic_id,
        "username": callback.from_user.full_name,
    }

    await send_question(callback.from_user.id)


async def send_question(user_id: int):
    user_data = user_progress.get(user_id)
    if not user_data:
        return

    index = user_data["current_index"]
    if index >= len(user_data["questions"]):
        await finish_quiz(user_id)
        return

    q_id, q_text, a, b, c, d, correct, explanation = user_data["questions"][index]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{letter}) {option}", callback_data=f"answer_{index}_{letter}")]
            for letter, option in zip(["a", "b", "c", "d"], [a, b, c, d])
        ]
    )

    await bot.send_message(
        user_id,
        f"–í–æ–ø—Ä–æ—Å {index + 1} –∏–∑ {len(user_data['questions'])}:\n\n{q_text}",
        reply_markup=keyboard,
    )


@dp.callback_query(lambda c: c.data.startswith("answer_"))
async def answer_handler(callback: types.CallbackQuery):
    # –°–†–ê–ó–£ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–≤–∏—Ç—å "query is too old"
    await callback.answer()

    user_id = callback.from_user.id
    user_data = user_progress.get(user_id)

    if not user_data:
        await callback.message.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return

    _, q_index_str, answer = callback.data.split("_")
    q_index = int(q_index_str)

    question = user_data["questions"][q_index]
    correct = question[6].lower()

    text = f"–í–æ–ø—Ä–æ—Å {q_index + 1}:\n\n{question[1]}\n–í–∞—à –æ—Ç–≤–µ—Ç: {answer.upper()}\n"

    if answer == correct:
        user_data["correct_answers"] += 1
        response_text = f"{text}‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n‚Ñπ {question[7]}"
    else:
        user_data["wrong_answers"].append((question[1], answer))
        response_text = f"{text}‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct.upper()}\n\n‚Ñπ {question[7]}"

    await callback.message.answer(response_text)

    user_data["current_index"] += 1
    await send_question(user_id)


async def finish_quiz(user_id: int):
    user_data = user_progress.pop(user_id, None)
    if not user_data:
        return

    total = len(user_data["questions"])
    correct = user_data["correct_answers"]

    result_text = f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total}\n"
    result_text += (
        "üî• –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!" if correct == total
        else "üòä –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!" if correct > total // 2
        else "üòï –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
    )

    await bot.send_message(user_id, result_text)

    # –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
    report = (
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        f"üë§ –ò–º—è: {user_data['username']}\n"
        f"üìå –¢–µ–º–∞: {user_data['topic_id']}\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct}/{total}\n"
        f"‚ùå –û—à–∏–±–∫–∏: {len(user_data['wrong_answers'])}"
    )
    await bot.send_message(838595372, report)


# ==== –ê–≤—Ç–æ-—É—Å—Ç–∞–Ω–æ–≤–∫–∞ / —Å–Ω—è—Ç–∏–µ –≤–µ–±—Ö—É–∫–∞ ====
@app.on_event("startup")
async def on_startup():
    logger.info(f"Setting webhook to: {WEBHOOK_URL}")
    # drop_pending_updates=True —á—Ç–æ–±—ã –Ω–µ –∫–æ–ø–∏–ª–∏—Å—å —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
    info = await bot.get_webhook_info()
    logger.info(f"Webhook set. Telegram says: {info}")


@app.on_event("shutdown")
async def on_shutdown():
    try:
        logger.info("Deleting webhook...")
        await bot.delete_webhook(drop_pending_updates=False)
        logger.info("Webhook deleted.")
    finally:
        # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await bot.session.close()


# ==== –ó–∞–ø—É—Å–∫ uvicorn ====
if __name__ == "__main__":
    port = int(os.getenv("PORT", 10000))
    uvicorn.run(app, host="0.0.0.0", port=port)
